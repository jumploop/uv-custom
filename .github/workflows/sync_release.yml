name: Sync UV Release to GitHub & Gitee

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  check_for_updates:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.compare_versions.outputs.proceed }}
      new_tag: ${{ steps.get_uv_version.outputs.tag }}
    steps:
      - name: Get latest uv release version
        id: get_uv_version
        run: |
          LATEST_UV_JSON=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/astral-sh/uv/releases/latest)
          LATEST_UV_TAG=$(echo "$LATEST_UV_JSON" | jq -r .tag_name)
          echo "tag=$LATEST_UV_TAG" >> $GITHUB_OUTPUT

      - name: Get latest GitHub local release version
        id: get_github_local_version
        run: |
          LATEST_GITHUB_TAG=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "tag=$LATEST_GITHUB_TAG" >> $GITHUB_OUTPUT

      - name: Get latest Gitee local release version
        id: get_gitee_local_version
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GITEE_OWNER: "jumploop"
          GITEE_REPO: "uv-custom"
        run: |
          LATEST_GITEE_TAG=$(curl -sL "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases/latest?access_token=$GITEE_TOKEN" | jq -r .tag_name)
          echo "tag=$LATEST_GITEE_TAG" >> $GITHUB_OUTPUT

      - name: Compare versions and decide to proceed
        id: compare_versions
        run: |
          echo "Latest uv release: ${{ steps.get_uv_version.outputs.tag }}"
          echo "Latest GitHub local release: ${{ steps.get_github_local_version.outputs.tag }}"
          echo "Latest Gitee local release: ${{ steps.get_gitee_local_version.outputs.tag }}"
          if [ "${{ steps.get_uv_version.outputs.tag }}" = "${{ steps.get_github_local_version.outputs.tag }}" ] && \
             [ "${{ steps.get_uv_version.outputs.tag }}" = "${{ steps.get_gitee_local_version.outputs.tag }}" ]; then
            echo "All repositories are up-to-date. No new release needed."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected or repositories are out of sync. Proceeding with release."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

  create_releases:
    needs: check_for_updates
    if: needs.check_for_updates.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate custom installers
        env:
          DOWNLOAD_PROXY: ${{ vars.DOWNLOAD_PROXY }}
        run: |
          chmod +x ./create_custom_uv_installer.sh
          ./create_custom_uv_installer.sh ${{ needs.check_for_updates.outputs.new_tag }}

      - name: Generate Unified Release Notes
        id: generate_notes
        run: |
          RELEASE_TAG="${{ needs.check_for_updates.outputs.new_tag }}"
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"
          GITEE_REPO_URL="https://gitee.com/jumploop/uv-custom"

          cat > release_notes.md <<EOF
          ## 🚀 uv 国内加速版 (同步自 uv官方版本 [$RELEASE_TAG](https://github.com/astral-sh/uv/releases/tag/$RELEASE_TAG))

          这是一个与 uv 官方版本同步的镜像版本，为国内用户提供了以下优化：

          - **下载加速**：所有 GitHub 下载链接均通过镜像代理，大幅提升下载速度。
          - **预设镜像**：自动为您配置清华大学 PyPI 镜像和 Python 构建镜像。
          - **灵活配置**：支持通过环境变量临时覆盖默认的下载代理和 PyPI 镜像。

          ---

          ### 快速安装

          请根据您的操作系统，在终端中运行以下对应的一键安装命令。**推荐使用 Gitee 源**。

          #### Gitee (推荐)
          \`\`\`sh
          # macOS / Linux
          curl -LsSf $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          \`\`\`
          \`\`\`powershell
          # Windows (PowerShell)
          powershell -ExecutionPolicy Bypass -c "irm $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.ps1 | iex"
          \`\`\`

          #### GitHub (备用)
          \`\`\`sh
          # macOS / Linux
          curl -LsSf $GITHUB_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          \`\`\`
          \`\`\`powershell
          # Windows (PowerShell)
          powershell -ExecutionPolicy Bypass -c "irm $GITHUB_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.ps1 | iex"
          \`\`\`

          ---

          ### 高级用法：自定义镜像源

          您可以在运行一键安装命令前，通过设置环境变量来临时指定下载代理和 PyPI 镜像。并可以选择下载不同的uv版本。

          - \`UV_DOWNLOAD_PROXY\`: 用于 \`uv\` 和 Python 的下载代理 (例如: \`https://gh-proxy.com\`)
          - \`UV_PYPI_MIRROR\`: PyPI 镜像源 (例如: \`https://mirrors.aliyun.com/pypi/simple/\`)
          - \`UV_VERSION\`: 选择下载不同的uv版本 (例如: \`0.7.19\`)

          #### macOS / Linux 示例
          \`\`\`sh
          export UV_DOWNLOAD_PROXY="https://gh-proxy.com";export UV_PYPI_MIRROR="https://mirrors.aliyun.com/pypi/simple/";export UV_VERSION="0.7.19"; \
          curl -LsSf $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          \`\`\`

          #### Windows (PowerShell) 示例
          \`\`\`powershell
          \$env:UV_DOWNLOAD_PROXY="https://gh-proxy.com"; \$env:UV_PYPI_MIRROR="https://mirrors.aliyun.com/pypi/simple/"; \$env:UV_VERSION="0.7.19"; \
          powershell -ExecutionPolicy Bypass -c "irm $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.ps1 | iex"
          \`\`\`

          ---

          ### (可选) 配置 Conda/Mamba 环境联动

          如果您希望 \`uv\` 能够自动识别并管理当前激活的 Conda/Mamba 环境，可以运行以下对应的脚本来配置 Shell 钩子。

          #### Gitee (推荐)
          \`\`\`sh
          # macOS / Linux
          curl -LsSf $GITEE_REPO_URL/releases/download/$RELEASE_TAG/setup_hooks.sh | sh
          \`\`\`
          \`\`\`powershell
          # Windows (PowerShell)
          powershell -ExecutionPolicy Bypass -c "irm $GITEE_REPO_URL/releases/download/$RELEASE_TAG/setup_hooks.ps1 | iex"
          \`\`\`
          EOF

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.check_for_updates.outputs.new_tag }}
        run: |
          if gh release view "$RELEASE_TAG" > /dev/null 2>&1; then
            echo "Release $RELEASE_TAG already exists on GitHub. Skipping creation."
          else
            echo "Creating GitHub release $RELEASE_TAG..."
            gh release create "$RELEASE_TAG" \
              --title "$RELEASE_TAG" \
              --notes-file release_notes.md \
              uv-installer-custom.sh \
              uv-installer-custom.ps1 \
              setup_hooks.sh \
              setup_hooks.ps1
          fi

      - name: Create Gitee Release
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          RELEASE_TAG: ${{ needs.check_for_updates.outputs.new_tag }}
          GITEE_OWNER: "jumploop"
          GITEE_REPO: "uv-custom"
        run: |
          set -x
          JSON_NOTES=$(jq -R -s '.' < release_notes.md)

          if curl -s --fail "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/tags/$RELEASE_TAG?access_token=$GITEE_TOKEN" > /dev/null; then
            echo "Tag $RELEASE_TAG already exists on Gitee. Skipping tag creation."
          else
            echo "Creating Gitee Tag..."
            curl -X POST --header 'Content-Type: application/json;charset=UTF-8' "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/tags" \
            -d "{\"access_token\":\"$GITEE_TOKEN\",\"tag_name\":\"$RELEASE_TAG\",\"refs\":\"main\",\"tag_message\":\"Release $RELEASE_TAG\"}"
          fi

          EXISTING_RELEASE_RESPONSE=$(curl -s "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases/tags/$RELEASE_TAG?access_token=$GITEE_TOKEN")
          RELEASE_ID=$(echo "$EXISTING_RELEASE_RESPONSE" | jq -r .id)

          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "No existing Gitee release found for tag $RELEASE_TAG. Creating a new one..."
            RELEASE_PAYLOAD=$(jq -n \
              --arg token "$GITEE_TOKEN" \
              --arg tag "$RELEASE_TAG" \
              --argjson notes "$JSON_NOTES" \
              '{access_token: $token, tag_name: $tag, name: $tag, body: $notes, target_commitish: "main"}')
            
            CREATE_RESPONSE=$(curl -X POST --header 'Content-Type: application/json;charset=UTF-8' \
              "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases" -d "$RELEASE_PAYLOAD")

            RELEASE_ID=$(echo "$CREATE_RESPONSE" | jq -r .id)
            ASSET_COUNT=0
          else
            echo "Found existing Gitee release with ID: $RELEASE_ID."
            ASSET_COUNT=$(echo "$EXISTING_RELEASE_RESPONSE" | jq '.assets | length')
            echo "It has $ASSET_COUNT assets."
          fi

          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Failed to create or find Gitee release."
            exit 1
          fi

          if [ "$ASSET_COUNT" -ge 4 ]; then
            echo "Release already has 4 or more assets. Skipping upload."
            exit 0
          fi

          echo "Uploading assets to Gitee Release ID: $RELEASE_ID..."
          for asset in uv-installer-custom.sh uv-installer-custom.ps1 setup_hooks.sh setup_hooks.ps1; do
            echo "Uploading $asset..."
            curl -X POST --header "Content-Type: multipart/form-data" \
            -F "access_token=$GITEE_TOKEN" \
            -F "file=@$asset" \
            "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases/$RELEASE_ID/attach_files"
          done
          echo "All assets uploaded to Gitee."
